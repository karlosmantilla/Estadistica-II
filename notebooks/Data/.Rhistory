# Unimos las tablas de ventas internacionales
internacional <- rbind(df.australia,
df.canada,
df.germany,
df.japan,
df.mexico,
df.nigeria)
summary(internacional)
# Añadimos el país a las ventas
library(dplyr)
df.ventas <- data.frame(left_join(df.ventas,df.geo[,c('Zip','Country')]))
summary(df.ventas)
df.ventas <- rbind(df.ventas,internacional)
## Transformemos las cadenas de caracteres en factores
df.ventas <- df.ventas %>%
mutate_if(is.character,factor)
summary(df.ventas)
df.ventas <- na.omit(df.ventas)
sample.size.prop(e=0.01, P = 0.5, level = 0.95)
n <- sample.size.prop(e=0.01, P = 0.5, level = 0.95)$n
n
muestra <- sample(1:nrow(df.ventas),size=n,replace=FALSE)
head(muestra)
m_ventas <- df.ventas[muestra,]
head(m_ventas)
dim(df.ventas)
# Esta es una función muy útil para crear gráficas múltiples
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
# veamos unos graficos:
# cajas
ggplot(m_ventas, aes(x = Country, y = Revenue)) + geom_boxplot()
# veamos unos graficos:
# cajas
library(ggplot2)
ggplot(m_ventas, aes(x = Country, y = Revenue)) + geom_boxplot()
head(m_ventas)
ggplot(m_ventas, aes(x = Country, y = Units)) + geom_boxplot()
ggplot(m_ventas, aes(x = Units, y = Revenue)) + geom_boxplot()
ggplot(m_ventas, aes(x = factor(Units), y = Revenue)) + geom_boxplot()
ggplot(m_ventas, aes(x = Revenue)) + geom_histogram()
ggplot(m_ventas, aes(x = Revenue)) + geom_histogram() + facet_wrap(~Country)
args(geom_histogram)
help(geom_histogram)
ggplot(m_ventas, aes(x = Revenue)) + geom_histogram(binwidth = 500) +
facet_wrap(~Country)
ggplot(m_ventas, aes(x = Revenue)) + geom_histogram(binwidth = 500)
ggplot(m_ventas, aes(x = Revenue)) + geom_histogram() +
facet_wrap(~Country)
ggplot(m_ventas, aes(x = Country, y = Revenue, fill = Country)) +
geom_boxplot()
ggplot(m_ventas, aes(x = Revenue, fill = Country)) + geom_histogram() +
facet_wrap(~Country)
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot()
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none')
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density..)) +
facet_wrap(~Country)
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none')
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none'),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density..)) +
facet_wrap(~Country),
cols = 2)
matrix(1,2,2, cols = 1)
matrix(1,2,2, ncol = 1)
matrix(c(1,2,2), ncol = 1)
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none'),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density..)) +
facet_wrap(~Country),
layput = matrix(c(1,2,2), ncol = 1))
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none'),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density..)) +
facet_wrap(~Country),
layout = matrix(c(1,2,2), ncol = 1))
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none'),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density..), bins = 50) +
facet_wrap(~Country),
layout = matrix(c(1,2,2), ncol = 1))
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none'),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density..), bins = 50,
col = Country, fill = 'white') +
facet_wrap(~Country),
layout = matrix(c(1,2,2), ncol = 1))
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none'),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density.., col = Country), bins = 50,
fill = 'white') +
facet_wrap(~Country),
layout = matrix(c(1,2,2), ncol = 1))
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none'),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density.., col = Country), bins = 50,
fill = 'white') + theme(legend.position = 'none') +
facet_wrap(~Country),
layout = matrix(c(1,2,2), ncol = 1))
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none') +
coord_flip(),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density.., col = Country), bins = 50,
fill = 'white') + theme(legend.position = 'none') +
facet_wrap(~Country),
layout = matrix(c(1,2,2), ncol = 1))
head(m_ventas)
# Vamos a usar los ingresos (revenue) como variable
muestra <- m_ventas$Revenue
n <- length(muestra)
varmedia <- (1/(n^2)) * sum((muestra - mean(muestra))^2)
desvmedia <- sqrt(varmedia)
c(varmedia,desvmedia)
library(boot)
statistic <- function(data, i){
remuestra <- data[i]
c(mean(remuestra), median(remuestra))
}
set.seed(1)
res.boot <- boot(muestra, statistic, R = B)
B <- 1e6
res.boot <- boot(muestra, statistic, R = B)
B <- 1e4
res.boot <- boot(muestra, statistic, R = B)
res.boot
media
median(muestra)
media <- numeric(B)
mediana <- numeric(B)
for (k in 1:B) {
remuestra <- sample(muestra, n, replace = TRUE)
media[k] <- mean(remuestra)
# remordenada <- sort(remuestra)
# mediana[k] <- remordenada[8]
mediana[k] <- median(remuestra)
}
var(media)
var(mediana)
### Estimadores puntuales:
# Media
mean(muestra)
var(muestra)
sd(muestra)
head(m_ventas)
table(m_ventas$Country)
data.frame(prop.table(table(m_ventas$Country)))[7,]
## Estimadores por MV
library(stats4) # para la función mle
library(bbmle) # para la función mle2
install.packages('bbmle') # para la función mle2
library(bbmle) # para la función mle2
x <- m_ventas$Revenue # Para trabajar con los datos muestrales que requerimos
NegLogLik = function(mu,sigma){-sum(dnorm(x,mu,sigma,log = TRUE))}
m.mu<-mean(m_ventas$Revenue) # Media
m.sigma<-sd(m_ventas$Revenue)
EMV1 = mle(NegLogLik, start = list(mu=m.mu, sigma=m.sigma))
summary(EMV1) # Para visualizar los valores
EMV2 = mle2(NegLogLik,start = list(mu=m.mu,sigma=m.sigma), data = list(x)) # La otra función
summary(EMV2)
########### Estimación por Intervalos
summary(muestra)
hist(muestra)
hist(muestra, breaks = 100)
hist(muestra, breaks = 50)
round(sd(muestra),2)
# Si suponemos que conocemos la varianza
media <- mean(na.omit(m_grados$Edad)) # Pedimos la media
desv <- sd(na.omit(m_grados$Edad)) # La desviación estándar
N <- length(na.omit(m_grados$Edad)) # El tamaño válido de la muestra
error.est <- desv/sqrt(N) # Calculamos el error estándar
error <- 1.96*error.est # Fijamos Z=1.96 para indicar un nivel de confianza de 95%
lim.inf <- media-error # Límite inferior del intervalo
lim.sup <- media+error # Límite superior del intervalo
# Si suponemos que conocemos la varianza
media <- mean(muestra) # Pedimos la media
desv <- sd(muestra) # La desviación estándar
N <- length(muestra) # El tamaño válido de la muestra
error.est <- desv/sqrt(N) # Calculamos el error estándar
error <- 1.96*error.est # Fijamos Z=1.96 para indicar un nivel de confianza de 95%
lim.inf <- media-error # Límite inferior del intervalo
lim.sup <- media+error # Límite superior del intervalo
resultado1 <- data.frame(media, desv, N, error.est, error, lim.inf, lim.sup)
round(t(resultado1,1))
round(t(resultado1),1)
# O usando la función
library(TeachingDemos)
install.packages('TeachingDemos')
z.test(muestra)
# O usando la función
library(TeachingDemos)
z.test(muestra)
z.test(muestra, stdev = sd(muestra))
## Como es el caso real, desconocemos la varianza
media <- mean(muestra)
desv <- sd(muestra)
N <- length(muestra)
error.est <- desv/sqrt(N)
error <- qt(0.975, df= N-1) * error.est # Usar el cuantil 0.975 de t
lim.inf <- media-error
lim.sup <- media+error
qt(0.975, df= N-1)
resultado2 <- data.frame(media, desv, N, error.est, error, lim.inf, lim.sup)
round(t(resultado2),1)
t.test(muestra, mu = mean(muestra), conf.level = 0.95)
freq(m_ventas$Country, plot = T)
library(descr)
install.packages('descr'')
.)
')'
install.packages('descr')
library(descr)
freq(m_ventas$Country, plot = T)
## Construyamos la variable dicotomica
cat <- ifelse(m_ventas$Country=="USA",'USA', 'Others')
round(prop.table(table(cat))*100,1)
cat2 <- ifelse(m_ventas$Country=="USA", 1, 0)
p <- mean(cat2)
paste0(round(p*100,1),"%")
n <- length(cat2) # Tamaño de la muestra
error.est.p <- sqrt((p*(1-p))/n) # Error estándar de la propoción
error.p <- 1.96 * error.est.p # Usamos Z = 1.96 para indicar un nivel de confianza del 95%
lim.inf.p <- p - error.p
lim.sup.p <- p + error.p
result.p <- data.frame(p, n, error.est.p, error.p, lim.inf.p, lim.sup.p)
round(t(result.p),3)
# O usando la funcion binconf
library(Hmisc)
binconf(x = nrow(m_ventas[m_ventas$Country=="USA",]),
n = nrow(m_ventas), alpha = 0.05)
library("sjPlot")
# Librerias necesarias
#install.packages(c('readxl','readr','dplyr','ggplot2',
#                  'samplingbook', 'boot, 'bbmle', 'TeachingDemos',
#                  'descr'))
devtools::install_github("strengejacke/sjPlot") # si no está intalada
install.packages('devtools')
# Librerias necesarias
#install.packages(c('readxl','readr','dplyr','ggplot2',
#                  'samplingbook', 'boot, 'bbmle', 'TeachingDemos',
#                  'descr'))
devtools::install_github("strengejacke/sjPlot") # si no está intalada
library("sjPlot")
library(stests)
devtools::install_github('fhernanb/stests', force=TRUE)
library(stests)
res <- var.test(x=muestra, conf.level=0.95)
res$conf.int
var.test(x=muestra, conf.level=0.95)
var.test(x=muestra, conf.level=0.95)
var.test(x=muestra, conf.level=0.95)
library(readxl)
producto <- read_excel("bi_dimensions.xlsx",
sheet = "product",
col_types = c("text","text",
"text", "text", "numeric"),
skip = 1)
df.producto <- data.frame(producto)
head(df.producto)
geo <- read_excel("bi_dimensions.xlsx", sheet = "geo",
skip = 3)
df.geo <- data.frame(geo)
head(df.geo)
library(readr)
ventas <- read_csv("sales.csv",
col_types = cols(ProductID = col_character(),
Date = col_character()))
df.ventas <- data.frame(ventas)
head(df.ventas)
australia <- read_csv("Australia.csv",
col_types = cols(ProductID = col_character(),
Date = col_character(),
Zip = col_character()))
df.australia <- data.frame(australia)
head(df.australia)
canada <- read_csv("Canada.csv",
col_types = cols(ProductID = col_character(),
Date = col_character(),
Zip = col_character()))
df.canada <- data.frame(canada)
head(df.canada)
germany <- read_csv("Germany.csv",
col_types = cols(ProductID = col_character(),
Date = col_character(),
Zip = col_character()))
df.germany <- data.frame(germany)
head(df.germany)
japan <- read_csv("Japan.csv",
col_types = cols(ProductID = col_character(),
Date = col_character()))
df.japan <- data.frame(japan)
head(df.japan)
mexico <- read_csv("Mexico.csv",
col_types = cols(ProductID = col_character(),
Date = col_character(),
Zip = col_character()))
df.mexico <- data.frame(mexico)
head(df.mexico)
nigeria <- read_csv("Nigeria.csv",
col_types = cols(ProductID = col_character(),
Zip = col_character()))
df.nigeria <- data.frame(nigeria)
head(df.nigeria)
head(df.ventas)
library(samplingbook)
sample.size.prop(e=0.01, P = 0.5, level = 0.95)
n <- sample.size.prop(e=0.01, P = 0.5, level = 0.95)$n
n
muestra <- sample(1:nrow(df.ventas),size=n,replace=FALSE)
head(muestra)
m_ventas <- df.ventas[muestra,]
head(m_ventas)
library(ggplot2)
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none') +
coord_flip(),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density.., col = Country), bins = 50,
fill = 'white') + theme(legend.position = 'none') +
facet_wrap(~Country),
layout = matrix(c(1,2,2), ncol = 1))
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none') +
coord_flip(),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density.., col = Country), bins = 50,
fill = 'white') + theme(legend.position = 'none') +
facet_wrap(~Country),
layout = matrix(c(1,2,2), ncol = 1))
muestra <- sample(1:nrow(df.ventas),size=n,replace=FALSE)
head(muestra)
m_ventas <- df.ventas[muestra,]
head(m_ventas)
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none') +
coord_flip(),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density.., col = Country), bins = 50,
fill = 'white') + theme(legend.position = 'none') +
facet_wrap(~Country),
layout = matrix(c(1,2,2), ncol = 1))
library(readxl)
producto <- read_excel("bi_dimensions.xlsx",
sheet = "product",
col_types = c("text","text",
"text", "text", "numeric"),
skip = 1)
df.producto <- data.frame(producto)
head(df.producto)
geo <- read_excel("bi_dimensions.xlsx", sheet = "geo",
skip = 3)
df.geo <- data.frame(geo)
head(df.geo)
### Leyendo archivos planos
library(readr)
ventas <- read_csv("sales.csv",
col_types = cols(ProductID = col_character(),
Date = col_character()))
df.ventas <- data.frame(ventas)
head(df.ventas)
australia <- read_csv("Australia.csv",
col_types = cols(ProductID = col_character(),
Date = col_character(),
Zip = col_character()))
df.australia <- data.frame(australia)
head(df.australia)
canada <- read_csv("Canada.csv",
col_types = cols(ProductID = col_character(),
Date = col_character(),
Zip = col_character()))
df.canada <- data.frame(canada)
head(df.canada)
germany <- read_csv("Germany.csv",
col_types = cols(ProductID = col_character(),
Date = col_character(),
Zip = col_character()))
df.germany <- data.frame(germany)
head(df.germany)
japan <- read_csv("Japan.csv",
col_types = cols(ProductID = col_character(),
Date = col_character()))
df.japan <- data.frame(japan)
head(df.japan)
mexico <- read_csv("Mexico.csv",
col_types = cols(ProductID = col_character(),
Date = col_character(),
Zip = col_character()))
df.mexico <- data.frame(mexico)
head(df.mexico)
nigeria <- read_csv("Nigeria.csv",
col_types = cols(ProductID = col_character(),
Zip = col_character()))
df.nigeria <- data.frame(nigeria)
head(df.nigeria)
# Transformamos las fechas
df.ventas$Date <- as.Date(df.ventas$Date, format = '%Y-%m-%d')
df.australia$Date <- as.Date(df.australia$Date, format = '%m/%d/%Y')
df.canada$Date <- as.Date(df.canada$Date, format = '%Y-%m-%d')
df.germany$Date <- as.Date(df.germany$Date, format = '%Y-%m-%d')
df.japan$Date <- as.Date(df.japan$Date, format = '%Y-%m-%d')
df.mexico$Date <- as.Date(df.mexico$Date, format = '%Y-%m-%d')
df.nigeria$Date <- as.Date(df.nigeria$Date, format = '%m/%d/%Y')
# Unimos las tablas de ventas internacionales
internacional <- rbind(df.australia,
df.canada,
df.germany,
df.japan,
df.mexico,
df.nigeria)
summary(internacional)
# Añadimos el país a las ventas
library(dplyr)
df.ventas <- data.frame(left_join(df.ventas,df.geo[,c('Zip','Country')]))
summary(df.ventas)
# Dejamos todo en una sola tabla
df.ventas <- rbind(df.ventas,internacional)
## Transformemos las cadenas de caracteres en factores
df.ventas <- df.ventas %>%
mutate_if(is.character,factor)
summary(df.ventas)
dim(df.ventas)
df.ventas <- na.omit(df.ventas)
dim(df.ventas)
### Para inferencia, debemos extraer una muestra
# Como no conocemos los parámetros poblacionales, vamos a
# usar proporciones para calcular la muestra
library(samplingbook)
sample.size.prop(e=0.01, P = 0.5, level = 0.95)
n <- sample.size.prop(e=0.01, P = 0.5, level = 0.95)$n
n
muestra <- sample(1:nrow(df.ventas),size=n,replace=FALSE)
head(muestra)
m_ventas <- df.ventas[muestra,]
head(m_ventas)
multiplot(
ggplot(m_ventas, aes(x = Country, y = Revenue, col = Country)) +
geom_boxplot() + theme(legend.position = 'none') +
coord_flip(),
ggplot(m_ventas, aes(x = Revenue)) +
geom_histogram(aes(y = ..density.., col = Country), bins = 50,
fill = 'white') + theme(legend.position = 'none') +
facet_wrap(~Country),
layout = matrix(c(1,2,2), ncol = 1))
# Eficiencia
var(media)
var(mediana)
### Estimadores puntuales:
# Media
mean(muestra)
var(muestra)
sd(muestra)
data.frame(prop.table(table(m_ventas$Country)))[7,]
